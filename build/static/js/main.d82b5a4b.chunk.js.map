{"version":3,"sources":["DragnDrop/DragnDrop.js","App.js","reportWebVitals.js","index.js"],"names":["DragnDrop","useState","selectedFiles","setSelectedFiles","errorMessage","setErrorMessage","validFiles","setValidFiles","invalidFiles","setInvalidFiles","viewImageRef","useRef","viewRef","selectFileRef","uploadViewRef","uploadRef","progressRef","fileSize","size","i","Math","floor","log","parseFloat","pow","toFixed","handleFiles","files","validate","prevArray","length","useEffect","filteredArray","reduce","file","current","find","item","name","concat","removeFile","validFileIndex","findIndex","e","splice","selectedFileIndex","invalidFileIndex","uploadFiles","a","style","display","innerHTML","formData","FormData","append","axios","post","onUploadProgress","progressEvent","uploadPercentage","loaded","total","width","catch","backgroundColor","indexOf","type","className","onClick","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","dataTransfer","click","ref","multiple","onChange","map","data","invalid","reader","FileReader","readAsDataURL","onload","backgroundImage","target","result","openImageView","fileName","substring","lastIndexOf","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d82b5a4b.chunk.js","sourcesContent":["import React,  { useState, useEffect, useRef } from 'react';\nimport './DragnDrop.css';\nimport axios from 'axios';\n\n\nconst DragnDrop = () => {\n\n    const [selectedFiles, setSelectedFiles] = useState([]);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [validFiles, setValidFiles] = useState([]);\n    const [invalidFiles, setInvalidFiles] = useState([]);\n    const viewImageRef = useRef();\n    const viewRef = useRef();\n    const selectFileRef = useRef();\n    const uploadViewRef = useRef();\n    const uploadRef = useRef();\n    const progressRef = useRef();\n\n\n    const fileSize = (size) => {\n        if (size === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        const i = Math.floor(Math.log(size) / Math.log(k));\n        return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    const fileType = (fileName) => {\n        return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n    }\n\n    const handleFiles = (files) => {\n        for(let i = 0; i < files.length; i++) {\n            if (validate(files[i])) {\n                setSelectedFiles(prevArray => [...prevArray, files[i]]);\n            } else {\n                files[i]['invalid'] = true;\n                setSelectedFiles(prevArray => [...prevArray, files[i]]);\n                setErrorMessage('Incorrect file type');\n                setInvalidFiles(prevArray => [...prevArray, files[i]]);\n            }\n        }\n    }\n    \n    useEffect(() => {\n        let filteredArray = selectedFiles.reduce((file, current) => {\n            const x = file.find(item => item.name === current.name);\n            if (!x) {\n                return file.concat([current]);\n            } else {\n                return file;\n            }\n        }, []);\n        setValidFiles([...filteredArray]);\n    \n    }, [selectedFiles]);\n\n    const removeFile = (name) => {\n    \n        const validFileIndex = validFiles.findIndex(e => e.name === name);\n        validFiles.splice(validFileIndex, 1);\n\n        setValidFiles([...validFiles]);\n        const selectedFileIndex = selectedFiles.findIndex(e => e.name === name);\n        selectedFiles.splice(selectedFileIndex, 1);\n\n        setSelectedFiles([...selectedFiles]);\n\n        const invalidFileIndex = invalidFiles.findIndex(e => e.name === name);\n        if (invalidFileIndex !== -1) {\n            invalidFiles.splice(invalidFileIndex, 1);\n            setInvalidFiles([...invalidFiles]);\n        }\n    }\n\n    const openImageView = (file) => {\n        const reader = new FileReader();\n        viewRef.current.style.display = \"block\";\n        reader.readAsDataURL(file);\n        reader.onload = function(e) {\n            viewImageRef.current.style.backgroundImage = `url(${e.target.result})`;\n        }\n    }\n\n    const closeView = () => {\n        viewRef.current.style.display = \"none\";\n        viewImageRef.current.style.backgroundImage = 'none';\n    }\n\n    const selectFilesClick = () => {\n        selectFileRef.current.click();\n    }\n\n    const selectFiles = () => {\n        if (selectFileRef.current.files.length) {\n            handleFiles(selectFileRef.current.files);\n        }\n    }\n\n    const closeUploadView = () => {\n        uploadViewRef.current.style.display = 'none';\n    }\n\n    const uploadFiles = async () => {\n        uploadViewRef.current.style.display = 'block';\n        uploadRef.current.innerHTML = 'File(s) Uploading...';\n        for (let i = 0; i < validFiles.length; i++) {\n            const formData = new FormData();\n            formData.append('image', validFiles[i]);\n            formData.append('key', 'd1c21236ab043000a520103fb587f677');\n\n            axios.post('https://api.imgbb.com/1/upload', formData, {\n                onUploadProgress: (progressEvent) => {\n                    const uploadPercentage = Math.floor((progressEvent.loaded / progressEvent.total) * 100);\n                    progressRef.current.innerHTML = `${uploadPercentage}%`;\n                    progressRef.current.style.width = `${uploadPercentage}%`;\n\n                    if (uploadPercentage === 100) {\n                        uploadRef.current.innerHTML = 'File(s) Uploaded';\n                        validFiles.length = 0;\n                        setValidFiles([...validFiles]);\n                        setSelectedFiles([...validFiles]);\n                        setInvalidFiles([...validFiles]);\n                    }\n                },\n            })\n            .catch(() => {\n                uploadRef.current.innerHTML = `<span class=\"error\">Error Uploading File(s)</span>`;\n                progressRef.current.style.backgroundColor = 'red';\n            })\n            // fetch('http://localhost:3000/upload/', {\n\t\t\t// method: 'POST',\n\t\t\t// body: formData\n            // }).then(\n            //     (progressEvent) => {\n            //         const uploadPercentage = Math.floor((progressEvent.loaded / progressEvent.total) * 100);\n            //         progressRef.current.innerHTML = `${uploadPercentage}%`;\n            //         progressRef.current.style.width = `${uploadPercentage}%`;\n            //         if (uploadPercentage === 100) {\n            //             uploadRef.current.innerHTML = 'File(s) Uploaded';\n            //             validFiles.length = 0;\n            //             setValidFiles([...validFiles]);\n            //             setSelectedFiles([...validFiles]);\n            //             setInvalidFiles([...validFiles]);\n            //         }\n            //     })\n            //     .catch(() => {\n            //         uploadRef.current.innerHTML = `<span class=\"error\">Error Uploading File(s)</span>`;\n            //         progressRef.current.style.backgroundColor = 'red';\n            //     });\n        }\n    }\n    \n    const dragOver = (e) => {\n        e.preventDefault();\n    }\n    \n    const dragEnter = (e) => {\n        e.preventDefault();\n    }\n    \n    const dragLeave = (e) => {\n        e.preventDefault();\n    }\n    \n    const validate = (file) => {\n        const validTypes = [\n        'image/jpeg',\n        'image/jpg', \n        'image/png',\n        'image/gif',\n        'image/x-icon'];\n        if (validTypes.indexOf(file.type) === -1) {\n            return false;\n        }\n        return true;\n    }\n    \n    const fileDrop = (e) => {\n        e.preventDefault();\n        const files = e.dataTransfer.files;\n        if (files.length) {\n            handleFiles(files);\n        }\n    }\n    \n    return (\n        <>\n        <div className=\"file-button\">\n            {invalidFiles.length === 0 && validFiles.length ? <button className=\"file-upload-btn\" onClick={() => uploadFiles()}>Upload Files</button> : ''} \n            {invalidFiles.length ? <p>Please remove all unsupported files.</p> : ''}\n        </div>\n        <div className=\"container\"\n            onDragOver={dragOver}\n            onDragEnter={dragEnter}\n            onDragLeave={dragLeave}\n            onDrop={fileDrop}\n            onClick={selectFilesClick}>\n            <div className=\"drop-container\">\n\n                <div className=\"drop-message\">\n                <input\n                    ref={selectFileRef}\n                    className=\"file-select\"\n                    type=\"file\"\n                    multiple\n                    onChange={selectFiles}\n                />\n                    <div className=\"upload-icon\"></div>\n                    ფაილი ჩააგდეთ აქ ან დააჭირეთ, რომ ფაილი აიტვირთოს\n                </div>\n\n                <div className=\"file-display-container\">\n                {\n                    validFiles.map((data, i) => \n                        <div className=\"file-status-bar\" key={i}>\n                            <div onClick={!data.invalid ? () => openImageView(data) : () => removeFile(data.name)}>\n                                <div className=\"file-type-logo\"></div>\n                                <div className=\"file-type\">{fileType(data.name)}</div>\n                                <span className={`file-name ${data.invalid ? 'file-error' : ''}`}>{data.name}</span>\n                                <span className=\"file-size\">({fileSize(data.size)})</span> {data.invalid && <span className='file-error-message'>({errorMessage})</span>}\n                            </div>\n                            <div className=\"file-remove\" onClick={() => removeFile(data.name)}>X</div>\n                        </div>\n                    )\n                }\n                </div>\n            </div>\n        </div>\n\n        <div className=\"view\" ref={viewRef}>\n            <div className=\"overlay\"></div>\n            <span className=\"close\" onClick={(() => closeView())}>X</span>\n            <div className=\"view-image\" ref={viewImageRef}></div>\n        </div>\n\n        <div className=\"upload-modal\" ref={uploadViewRef}>\n            <div className=\"overlay\"></div>\n            <div className=\"close\" onClick={(() => closeUploadView())}>X</div>\n            <div className=\"progress-container\">\n                <span ref={uploadRef}></span>\n                <div className=\"progress\">\n                    <div className=\"progress-bar\" ref={progressRef}></div>\n                </div>\n            </div>\n        </div>\n\n        </>\n    )\n}\nexport default DragnDrop;","import React from 'react';\nimport './App.css';\nimport DragnDrop from './DragnDrop/DragnDrop'\n\nfunction App() {\n  return(\n    <div>\n    <p className=\"title\">სურათის Drag & Drop</p>\n    <div className=\"content\">\n      <DragnDrop />\n    </div>\n    </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}